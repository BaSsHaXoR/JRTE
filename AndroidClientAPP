package com.lakj.comspace.simpletextclient;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.InputFilter;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

/**
 * This is a simple Android mobile client
 * This application read any string massage typed on the text field and 
 * send it to the server when the Send button is pressed
 * Author by Lak J Comspace
 *
 */
public class SlimpleTextClientActivity extends Activity {
	private int countcmds = 0;
	private Socket client;
	private PrintWriter printwriter;
	private Button connectbutton;
	private Button attachbutton;
	private String messsage;
	private EditText Logtext;
	private Button ChangeNameBtn;
	private EditText NameChangeText;
	private EditText ipaddressbox;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		connectbutton = (Button) findViewById(R.id.button1); // reference to the send button
		attachbutton = (Button) findViewById(R.id.attachbutton);
		Logtext = (EditText) findViewById(R.id.cmdlogtxt); 
		ChangeNameBtn = (Button) findViewById(R.id.Changenamebtn);
		NameChangeText = (EditText) findViewById(R.id.changenametextbox);
		//ipaddresstextbox

		ipaddressbox = (EditText)findViewById(R.id.ipaddresstextbox);
		InputFilter[] filters = new InputFilter[1];
		    filters[0] = new InputFilter() {
		        @Override
		        public CharSequence filter(CharSequence source, int start, int end,
		                android.text.Spanned dest, int dstart, int dend) {
		            if (end > start) {
		                String destTxt = dest.toString();
		                String resultingTxt = destTxt.substring(0, dstart) + source.subSequence(start, end) + destTxt.substring(dend);
		                if (!resultingTxt.matches ("^\\d{1,3}(\\.(\\d{1,3}(\\.(\\d{1,3}(\\.(\\d{1,3})?)?)?)?)?)?")) { 
		                    return "";
		                } else {
		                    String[] splits = resultingTxt.split("\\.");
		                    for (int i=0; i<splits.length; i++) {
		                        if (Integer.valueOf(splits[i]) > 255) {
		                            return "";
		                        }
		                    }
		                }
		            }
		            return null;
		        }

		    };
		    ipaddressbox.setFilters(filters);
	
		// Button press event listener
					ChangeNameBtn.setOnClickListener(new View.OnClickListener() {
						
						public void onClick(View v) {
							messsage = "ChangeName|" + NameChangeText.getText().toString();// textField.getText().toString(); // get the text message on the text field
							String checkifempty = Logtext.getText().toString();
							if(checkifempty.matches(""))
							{
								countcmds = countcmds + 1;
								Logtext.setText("CMD #: " + countcmds + " -> " + "SetMemory" + "\n");
							}
							else
							{
								countcmds = countcmds + 1;
								Logtext.setText(checkifempty + "\n" + "CMD #: " + countcmds + " -> " + "SetMemory" + "\n");
							}
							
							SendMessage sendMessageTask = new SendMessage();
							sendMessageTask.execute();
						}	
				});
		
		// Button press event listener
		connectbutton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				messsage = "Connect";// textField.getText().toString(); // get the text message on the text field
				String checkifempty = Logtext.getText().toString();
				if(checkifempty.matches(""))
				{
					Logtext.setText("");
					countcmds = countcmds + 1;
					Logtext.setText("CMD #: " + countcmds + " -> " + "Connect command sent." + "\n");
					
				}
				else
				{
					Logtext.setText("");
					countcmds = countcmds + 1;
					Logtext.setText(checkifempty + "\n" + "CMD #: " + countcmds + " -> " + "Connect command sent." + "\n");
				}
				SendMessage sendMessageTask = new SendMessage();
				sendMessageTask.execute();
			}
		});
			

	// Button press event listener
				attachbutton.setOnClickListener(new View.OnClickListener() {
					
					public void onClick(View v) {
					//	i = i + 1;
					//	((Button) v).setText("CMD's Sent: " + i);
						messsage = "Attach";// textField.getText().toString(); // get the text message on the text field
						String checkifempty = Logtext.getText().toString();
						if(checkifempty.matches(""))
						{
							countcmds = countcmds + 1;
							Logtext.setText("CMD #: " + countcmds + " -> " + "Attach command sent." + "\n");
						}
						else
						{
							countcmds = countcmds + 1;
							Logtext.setText(checkifempty + "\n" + "CMD #: " + countcmds + " -> " + "Attach command sent." + "\n");
						}
						
						SendMessage sendMessageTask = new SendMessage();
						sendMessageTask.execute();
					}	
			});
		}
	
	private class SendMessage extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				int port = 1337;
				String ipaddressx = ipaddressbox.getText().toString();
				client = new Socket(ipaddressx, port); // connect to the server
				printwriter = new PrintWriter(client.getOutputStream(), true);
				printwriter.write(messsage); // write the message to output stream

				printwriter.flush();
				printwriter.close();
				client.close(); // closing the connection

			} catch (UnknownHostException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		}

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.slimple_text_client, menu);
		return true;
	}

}
